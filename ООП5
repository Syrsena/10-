using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace ConsoleApp15

{
    internal class Program
    {
        static void Main(string[] args)
        {
            Storage storage = new Storage();
            storage.Work();
        }
    }

    class Storage
    {
        private List<Book> _books = new List<Book>();

        public Storage()
        {
            _books.Add(new Book("Война и мир", "Лев Толстой", "1869"));
            _books.Add(new Book("Мастер и Маргарита", "Михаил Булгаков", "1940"));
            _books.Add(new Book("Собачье сердце", "Михаил Булгаков", "1925"));
            _books.Add(new Book("Мертвые души", "Николай Гоголь", "1842"));
            _books.Add(new Book("Преступление и наказание", "Федор Достоевский", "1866"));
            _books.Add(new Book("Евгений Онегин", "Александр Пушкин", "1837"));
            _books.Add(new Book("Отцы и дети", "Иван Тургенев", "1861"));
            _books.Add(new Book("Повести Белкина", "Александр Пушкин", "1831"));
            _books.Add(new Book("Идиот", "Федор Достоевский", "1869"));
            _books.Add(new Book("Анна Каренина", "Лев Толстой", "1877"));
        }

        public void Work()
        {
            const string CommandAddBook = "1";
            const string CommandRemoveBook = "2";
            const string CommandShowAllBooks = "3";
            const string CommandSearchByParameter = "4";
            const string CommandExit = "0";

            bool isActive = true;

            while (isActive == true)
            {
                Console.Clear();
                Console.WriteLine(
                    CommandAddBook + " - Добавить новую книгу\n" +
                    CommandRemoveBook + " - Удалить книгу\n" +
                    CommandShowAllBooks + " - Показать все книги\n" +
                    CommandSearchByParameter + " - Поиск по названию/автору/году выпуска\n" +
                    CommandExit + " - Выход из программы\n");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandAddBook:
                        AddBook();
                        break;
                    case CommandRemoveBook:
                        RemoveBook();
                        break;
                    case CommandShowAllBooks:
                        ShowAllBooksInfo();
                        break;
                    case CommandSearchByParameter:
                        SearchByParametr();
                        break;
                    case CommandExit:
                        isActive = false;
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }

        private void AddBook()
        {
            if (IsHasBook(out Book book) == false)
            {
                _books.Add(book);
                Console.WriteLine("Успешно добавлено.");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("Такая книга уже есть в списке! ");
                Console.ReadKey();
            }
        }

        private void RemoveBook()
        {
            if (IsHasBook(out Book book) == true)
            {
                _books.Remove(book);
                Console.WriteLine("Успешно удалено.");
                Console.ReadKey();
            }
            else
            {
                Console.WriteLine("Такой книги нет в списке! ");
                Console.ReadKey();
            }
        }

        private void SearchByParametr()
        {
            Console.Clear();
            const string CommandSearchByTitle = "1";
            const string CommandSearchByAuthor = "2";
            const string CommandSearchByReleaseYear = "3";

            Console.WriteLine(
                    CommandSearchByTitle + " - Поиск по названию книги\n" +
                    CommandSearchByAuthor + " - Поиск по автору\n" +
                    CommandSearchByReleaseYear + " - Поиск по году издания\n");
            string userInput = Console.ReadLine();

            switch (userInput)
            {
                case CommandSearchByTitle:
                    SearchByTitle();
                    break;
                case CommandSearchByAuthor:
                    SearchByAuthor();
                    break;
                case CommandSearchByReleaseYear:
                    SearchByReleaseYear();
                    break;
            }
        }

        private void SearchByTitle()
        {
            Console.Clear();
            Console.WriteLine("Введите название книги: ");
            string userInputTitle = Console.ReadLine();
            Console.Clear();
            int axisY = 0;

            foreach (var book in _books)
            {
                if (book.Title == userInputTitle)
                {
                    book.ShowBookInfo(axisY);
                    axisY++;
                }
            }
            Console.ReadKey();
        }

        private void SearchByAuthor()
        {
            Console.Clear();
            Console.WriteLine("Введите имя автора: ");
            string userInputAuthor = Console.ReadLine();
            Console.Clear();
            int axisY = 0;

            foreach (var book in _books)
            {
                if (book.Author == userInputAuthor)
                {
                    book.ShowBookInfo(axisY);
                    axisY++;
                }
            }
            Console.ReadKey();
        }

        private void SearchByReleaseYear()
        {
            Console.Clear();
            Console.WriteLine("Введите год издания: ");
            string userInputReleaseYear = Console.ReadLine();
            Console.Clear();
            int axisY = 0;

            foreach (var book in _books)
            {
                if (book.ReleaseYear == userInputReleaseYear)
                {
                    book.ShowBookInfo(axisY);
                    axisY++;
                }
            }
            Console.ReadKey();
        }

        private bool IsHasBook(out Book book)
        {
            Console.Clear();
            Console.WriteLine("Введите название книги: ");
            string userInputTitle = Console.ReadLine();
            Console.WriteLine("Введите автора книни: ");
            string userInputAuthor = Console.ReadLine();
            Console.WriteLine("Введите дату издания книги: ");
            string userInputReleaseYear = Console.ReadLine();

            book = new Book(userInputTitle, userInputAuthor, userInputReleaseYear);

            for (int i = 0; i < _books.Count; i++)
            {
                if (_books[i].Title == book.Title && _books[i].Author == book.Author && _books[i].ReleaseYear == book.ReleaseYear)
                {
                    book = _books[i];
                    return true;
                }
            }

            return false;
        }

        private void ShowAllBooksInfo()
        {
            Console.Clear();

            for (int i = 0; i < _books.Count; i++)
            {
                var book = _books[i];
                book.ShowBookInfo(i);
            }
            Console.ReadKey();
        }
    }

    class Book
    {
        public string Title { get; private set; }

        public string Author { get; private set; }

        public string ReleaseYear { get; private set; }

        public Book(string title, string author, string releaseYear)
        {
            Title = title;
            Author = author;
            ReleaseYear = releaseYear;
        }

        public void ShowBookInfo(int axisY)
        {
            Console.SetCursorPosition(0, axisY);
            Console.Write(Title);
            Console.SetCursorPosition(30, axisY);
            Console.Write(Author);
            Console.SetCursorPosition(50, axisY);
            Console.Write(ReleaseYear);
        }
    }
}
