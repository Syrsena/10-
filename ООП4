using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace ConsoleApp15

{
    internal class Program
    {
        static void Main(string[] args)
        {
            Deck deck = new Deck();
            deck.Menu();
        }
    }

    class Deck
    {
        private List<Card> _cardsInDeck;
        private List<Card> _cardsInHand;

        public Deck()
        {
            _cardsInDeck = new List<Card>();
            _cardsInHand = new List<Card>();

            foreach (var suit in new[] { "Крести", "Черви", "Пики", "Бубны", })
            {
                for (int value = 6; value <= 14; value++)
                {
                    if (value <= 10)
                    {
                        _cardsInDeck.Add(new Card(Convert.ToString(value), suit));
                    }
                    else if (value == 11)
                    {
                        _cardsInDeck.Add(new Card("Валет", suit));
                    }
                    else if (value == 12)
                    {
                        _cardsInDeck.Add(new Card("Дама", suit));
                    }
                    else if (value == 13)
                    {
                        _cardsInDeck.Add(new Card("Король", suit));
                    }
                    else if (value == 14)
                    {
                        _cardsInDeck.Add(new Card("Туз", suit));
                    }
                }
            }
        }

        public void Menu()
        {
            const string CommandStartGame = "1";
            const string CommandShowInfo = "2";
            const string CommandExit = "0";
            bool isActive = true;

            while (isActive)
            {
                Console.WriteLine(
                CommandStartGame + " - Начать.\n" +
                CommandShowInfo + " - Посмотреть информацию о картах.\n" +
                CommandExit + " - Выход.\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                switch (userInput)
                {
                    case CommandStartGame:
                        Game();
                        break;
                    case CommandShowInfo:
                        ShowAllCards(ref _cardsInDeck);
                        break;
                    case CommandExit:
                        isActive = false;
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }

        private void Game()
        {
            bool isActive = true;
            _cardsInDeck = ShuffleCard();

            while (isActive)
            {
                Console.SetCursorPosition(0, 0);
                const string CommandTakeCard = "1";
                const string CommandBreak = "2";
                Console.WriteLine(CommandTakeCard + " - Взять карту.\n" + CommandBreak + " - Достаточно\n");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandTakeCard:
                        TakeCard();
                        break;
                    case CommandBreak:
                        isActive = Break();
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }

        private void TakeCard()
        {
            Console.Clear();

            if (TryGetCard(out Card card) == true)
            {
                _cardsInHand.Add(card);
                _cardsInDeck.Remove(card);
                int index = 0;
                card.ShowCardInfo(ref index);
            }

            Console.ReadKey();
            Console.Clear();
        }

        private bool Break()
        {
            Console.Clear();
            ShowAllCards(ref _cardsInHand);

            foreach (var card in _cardsInHand)
            {
                _cardsInDeck.Add(card);
            }

            _cardsInHand.Clear();
            return false;
        }

        private bool TryGetCard(out Card card)
        {
            if (_cardsInDeck.Count > 0)
            {
                for (int i = 0; i < _cardsInDeck.Count; i++)
                {
                    card = _cardsInDeck[i];
                    return true;
                }
            }
            else
            {
                Console.WriteLine("Карты кончились, бро");
            }
            card = null;
            return false;
        }

        private List<Card> ShuffleCard()
        {
            List<Card> shuffledCards;
            Random random = new Random();
            shuffledCards = _cardsInDeck;

            for (int i = 0; i < shuffledCards.Count; i++)
            {
                var temp = shuffledCards[0];
                shuffledCards.RemoveAt(0);
                shuffledCards.Insert(random.Next(shuffledCards.Count), temp);
            }

            return shuffledCards;
        }

        private void ShowAllCards(ref List<Card> cards)
        {
            for (int i = 0; i < cards.Count; i++)
            {
                var card = cards[i];
                card.ShowCardInfo(ref i);
            }
            Console.ReadKey();
            Console.Clear();
        }
    }

    class Card
    {
        private string _value;
        private string _suit;
        private static int _lastIndex;
        private int _index;

        public Card(string value, string suit)
        {
            _value = value;
            _suit = suit;
            _index = ++_lastIndex;
        }

        public void ShowCardInfo(ref int axisY)
        {
            Console.SetCursorPosition(0, axisY);
            Console.Write(_value);
            Console.SetCursorPosition(8, axisY);
            Console.Write(_suit);
            Console.SetCursorPosition(35, axisY);
            Console.Write(_index);
        }
    }
}
