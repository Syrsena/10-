using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace ConsoleApp15

{
    internal class Program
    {
        static void Main(string[] args)
        {
            Game game = new Game();
            game.ShowMenu();
        }
    }

    class Game
    {
        public void ShowMenu()
        {
            const string CommandStartGame = "1";
            const string CommandShowInfo = "2";
            const string CommandExit = "0";
            bool isActive = true;

            while (isActive)
            {
                Console.WriteLine(
                CommandStartGame + " - Начать.\n" +
                CommandShowInfo + " - Посмотреть информацию о картах.\n" +
                CommandExit + " - Выход.\n");
                string userInput = Console.ReadLine();
                Console.Clear();
                Deck deck = new Deck();
                Player player = new Player();

                switch (userInput)
                {
                    case CommandStartGame:
                        Work(deck, player);
                        break;
                    case CommandShowInfo:
                        deck.ShowAllCards();
                        break;
                    case CommandExit:
                        isActive = false;
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }

        private void Work(Deck deck, Player player)
        {
            deck.ShuffleCards();
            bool isActive = true;

            while (isActive)
            {
                Console.SetCursorPosition(0, 0);
                const string CommandTakeCard = "1";
                const string CommandBreak = "2";
                Console.WriteLine(CommandTakeCard + " - Взять карту.\n" + CommandBreak + " - Достаточно\n");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandTakeCard:
                        player.TakeCard(deck);
                        break;
                    case CommandBreak:
                        isActive = player.StopGame();
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }
    }

    class Player
    {
        private List<Card> _cardsInHand = new List<Card>();

        public void TakeCard(Deck deck)
        {
            _cardsInHand.Add(deck.GiveCardOrNull());
        }

        public bool StopGame()
        {
            Console.Clear();

            if (_cardsInHand.Count > 0)
            {
                for (int i = 0; i < _cardsInHand.Count; i++)
                {
                    var card = _cardsInHand[i];
                    card.ShowInfo(i);
                }
                Console.ReadKey();
                Console.Clear();
            }
            else
            {
                Console.WriteLine("В руке нет карт.");
                Console.ReadKey();
                Console.Clear();
            }
            return false;
        }
    }

    class Deck
    {
        private List<Card> _cardsInDeck;

        public Deck()
        {
            SetDeck();
        }

        private void SetDeck()
        {
            string[] suits = { "Крести", "Черви", "Пики", "Бубны" };
            string[] values = { "6", "7", "8", "9", "10", "Валет", "Дама", "Король", "Туз" };
            _cardsInDeck = new List<Card>();

            for (int i = 0; i < suits.Length; i++)
            {
                for (int j = 0; j < values.Length; j++)
                {
                    _cardsInDeck.Add(new Card(suits[i], values[j]));
                }
            }
        }

        public Card GiveCardOrNull()
        {
            Console.Clear();

            if (TryGetCard(out Card card) == true)
            {
                _cardsInDeck.Remove(card);
                int axisY = 0;
                card.ShowInfo(axisY);
                Console.ReadKey();
                Console.Clear();
                return card;
            }
            else
            {
                return null;
            }
        }

        public void ShuffleCards()
        {
            Random random = new Random();
            int index;
            Card value;

            for (int i = _cardsInDeck.Count - 1; i >= 0; i--)
            {
                index = random.Next(i);
                value = _cardsInDeck[index];
                _cardsInDeck[index] = _cardsInDeck[i];
                _cardsInDeck[i] = value;
            }
        }

        public void ShowAllCards()
        {
            for (int i = 0; i < _cardsInDeck.Count; i++)
            {
                var card = _cardsInDeck[i];
                card.ShowInfo(i);
            }
            Console.ReadKey();
            Console.Clear();
        }

        private bool TryGetCard(out Card card)
        {
            if (_cardsInDeck.Count > 0)
            {
                card = _cardsInDeck[0];
                return true;
            }
            else
            {
                Console.WriteLine("Карты кончились, бро");
            }
            card = null;
            return false;
        }
    }

    class Card
    {
        public string Value { get; private set; }
        public string Suit { get; private set; }

        public Card(string value, string suit)
        {
            Value = value;
            Suit = suit;
        }

        public void ShowInfo(int axisY)
        {
            Console.SetCursorPosition(0, axisY);
            Console.Write(Value);
            Console.SetCursorPosition(8, axisY);
            Console.Write(Suit);
        }
    }
}
