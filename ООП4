using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace ConsoleApp15

{
    internal class Program
    {
        static void Main(string[] args)
        {
            Game croupier = new Game();
            croupier.Menu();
        }
    }

    class Game
    {
        public void Menu()
        {
            const string CommandStartGame = "1";
            const string CommandShowInfo = "2";
            const string CommandExit = "0";
            bool isActive = true;

            while (isActive)
            {
                Console.WriteLine(
                CommandStartGame + " - Начать.\n" +
                CommandShowInfo + " - Посмотреть информацию о картах.\n" +
                CommandExit + " - Выход.\n");
                string userInput = Console.ReadLine();
                Console.Clear();

                Deck deck = new Deck();
                Player player = new Player();

                switch (userInput)
                {
                    case CommandStartGame:
                        Work(ref deck, ref player);
                        break;
                    case CommandShowInfo:
                        deck.ShowAllCards();
                        break;
                    case CommandExit:
                        isActive = false;
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }

        private void Work(ref Deck deck, ref Player player)
        {
            deck.ShuffleCards();
            bool isActive = true;

            while (isActive)
            {
                Console.SetCursorPosition(0, 0);
                const string CommandTakeCard = "1";
                const string CommandBreak = "2";
                Console.WriteLine(CommandTakeCard + " - Взять карту.\n" + CommandBreak + " - Достаточно\n");
                string userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandTakeCard:
                        player.TakeCard(ref deck);
                        break;
                    case CommandBreak:
                        isActive = player.Break();
                        break;
                    default:
                        Console.Clear();
                        break;
                }
            }
        }
    }

    class Player
    {
        private List<Card> _cardsInHand = new List<Card>();


        public void TakeCard(ref Deck deck)
        {
            _cardsInHand.Add(deck.GiveCard());
        }

        public bool Break()
        {
            Console.Clear();

            if (_cardsInHand.Count > 0)
            {
                for (int i = 0; i < _cardsInHand.Count; i++)
                {
                    var card = _cardsInHand[i];
                    card.ShowCardInfo(ref i);
                }
                Console.ReadKey();
                Console.Clear();
            }
            else
            {
                Console.WriteLine("В руке нет карт.");
                Console.ReadKey();
                Console.Clear();
            }



            return false;
        }
    }

    class Deck
    {
        private List<Card> _cardsInDeck;

        public Deck()
        {
            string[] suit = { "Крести", "Черви", "Пики", "Бубны" };
            string[] value = { "6", "7", "8", "9", "10", "Валет", "Дама", "Король", "Туз" };
            List<Card> allCards = new List<Card>();

            for (int i = 0; i < suit.Length; i++)
            {
                for (int j = 0; j < value.Length; j++)
                {
                    allCards.Add(new Card(suit[i], value[j]));
                }
            }

            _cardsInDeck = allCards;
        }



        public Card GiveCard() 
        {
            Console.Clear();

            if (TryGetCard(out Card card) == true)
            {
                _cardsInDeck.Remove(card);
                int onY = 0;
                card.ShowCardInfo(ref onY);
                Console.ReadKey();
                Console.Clear();
                return card;
            }
            else
            {
                return null;
            }
        }

        private bool TryGetCard(out Card card)
        {
            if (_cardsInDeck.Count > 0)
            {
                foreach (Card tempCard in _cardsInDeck)
                {
                    card = tempCard;
                    return true;
                }
            }
            else
            {
                Console.WriteLine("Карты кончились, бро");
            }
            card = null;
            return false;
        }

        public List<Card> ShuffleCards()
        {
            Random random = new Random();
            int count = _cardsInDeck.Count;

            for (int i = 0; i < count; i++)
            {
                Card tempCard = _cardsInDeck[i];
                _cardsInDeck.RemoveAt(i);
                _cardsInDeck.Insert(random.Next(0, count), tempCard);
            }

            return _cardsInDeck;
        }

        public void ShowAllCards()
        {
            for (int i = 0; i < _cardsInDeck.Count; i++)
            {
                var card = _cardsInDeck[i];
                card.ShowCardInfo(ref i);
            }
            Console.ReadKey();
            Console.Clear();
        }
    }

    class Card
    {
        public string Value { get; private set; }
        public string Suit { get; private set; }

        public Card(string value, string suit)
        {
            Value = value;
            Suit = suit;
        }

        public void ShowCardInfo(ref int onY)
        {
            Console.SetCursorPosition(0, onY);
            Console.Write(Value);
            Console.SetCursorPosition(8, onY);
            Console.Write(Suit);
        }
    }
}
